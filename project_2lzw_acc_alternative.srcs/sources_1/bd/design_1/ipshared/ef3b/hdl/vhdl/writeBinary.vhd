-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity writeBinary is
generic (
    C_S_AXI_S_AXI_BUNDLE_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_S_AXI_BUNDLE_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_S_AXI_BUNDLE_AWVALID : IN STD_LOGIC;
    s_axi_S_AXI_BUNDLE_AWREADY : OUT STD_LOGIC;
    s_axi_S_AXI_BUNDLE_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_S_AXI_BUNDLE_ADDR_WIDTH-1 downto 0);
    s_axi_S_AXI_BUNDLE_WVALID : IN STD_LOGIC;
    s_axi_S_AXI_BUNDLE_WREADY : OUT STD_LOGIC;
    s_axi_S_AXI_BUNDLE_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_S_AXI_BUNDLE_DATA_WIDTH-1 downto 0);
    s_axi_S_AXI_BUNDLE_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_S_AXI_BUNDLE_DATA_WIDTH/8-1 downto 0);
    s_axi_S_AXI_BUNDLE_ARVALID : IN STD_LOGIC;
    s_axi_S_AXI_BUNDLE_ARREADY : OUT STD_LOGIC;
    s_axi_S_AXI_BUNDLE_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_S_AXI_BUNDLE_ADDR_WIDTH-1 downto 0);
    s_axi_S_AXI_BUNDLE_RVALID : OUT STD_LOGIC;
    s_axi_S_AXI_BUNDLE_RREADY : IN STD_LOGIC;
    s_axi_S_AXI_BUNDLE_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_S_AXI_BUNDLE_DATA_WIDTH-1 downto 0);
    s_axi_S_AXI_BUNDLE_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_S_AXI_BUNDLE_BVALID : OUT STD_LOGIC;
    s_axi_S_AXI_BUNDLE_BREADY : IN STD_LOGIC;
    s_axi_S_AXI_BUNDLE_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of writeBinary is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "writeBinary,hls_ip_2017_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.495000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=4,HLS_SYN_FF=407,HLS_SYN_LUT=636}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv65_19999999A : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000110011001100110011001100110011010";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv65_0 : STD_LOGIC_VECTOR (64 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal code : STD_LOGIC_VECTOR (31 downto 0);
    signal out_r : STD_LOGIC_VECTOR (31 downto 0);
    signal leftover : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal leftoverBits : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal code_read_reg_272 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_assign_fu_133_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_97_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal previousCode_fu_161_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_assign_1_fu_185_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_assign_1_reg_294 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_i_fu_167_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_fu_195_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal mul_reg_299 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_11_reg_304 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_reg_310 : STD_LOGIC_VECTOR (28 downto 0);
    signal out_assign_1_fu_219_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_assign_fu_265_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal p_i_reg_66 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_0_i_reg_75 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_0_reg_84 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_cast_fu_107_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_103_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_fu_123_p4 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_5_fu_147_p4 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_2_fu_157_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_141_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_179_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_173_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_fu_195_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal neg_mul_fu_230_p2 : STD_LOGIC_VECTOR (64 downto 0);
    signal tmp_12_fu_235_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal tmp_8_fu_245_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_249_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_252_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal neg_ti_fu_259_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_return : STD_LOGIC_VECTOR (31 downto 0);

    component writeBinary_S_AXI_BUNDLE_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        ap_return : IN STD_LOGIC_VECTOR (31 downto 0);
        code : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_r : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    writeBinary_S_AXI_BUNDLE_s_axi_U : component writeBinary_S_AXI_BUNDLE_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_S_AXI_BUNDLE_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_S_AXI_BUNDLE_DATA_WIDTH)
    port map (
        AWVALID => s_axi_S_AXI_BUNDLE_AWVALID,
        AWREADY => s_axi_S_AXI_BUNDLE_AWREADY,
        AWADDR => s_axi_S_AXI_BUNDLE_AWADDR,
        WVALID => s_axi_S_AXI_BUNDLE_WVALID,
        WREADY => s_axi_S_AXI_BUNDLE_WREADY,
        WDATA => s_axi_S_AXI_BUNDLE_WDATA,
        WSTRB => s_axi_S_AXI_BUNDLE_WSTRB,
        ARVALID => s_axi_S_AXI_BUNDLE_ARVALID,
        ARREADY => s_axi_S_AXI_BUNDLE_ARREADY,
        ARADDR => s_axi_S_AXI_BUNDLE_ARADDR,
        RVALID => s_axi_S_AXI_BUNDLE_RVALID,
        RREADY => s_axi_S_AXI_BUNDLE_RREADY,
        RDATA => s_axi_S_AXI_BUNDLE_RDATA,
        RRESP => s_axi_S_AXI_BUNDLE_RRESP,
        BVALID => s_axi_S_AXI_BUNDLE_BVALID,
        BREADY => s_axi_S_AXI_BUNDLE_BREADY,
        BRESP => s_axi_S_AXI_BUNDLE_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        ap_return => p_0_reg_84,
        code => code,
        out_r => out_r);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    leftover_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_fu_167_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                leftover(0) <= '0';
            elsif (((tmp_fu_97_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                leftover(0) <= '1';
            end if; 
        end if;
    end process;

    p_0_i_reg_75_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                p_0_i_reg_75 <= x_assign_1_reg_294;
            elsif (((tmp_fu_97_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                p_0_i_reg_75 <= previousCode_fu_161_p2;
            end if; 
        end if;
    end process;

    p_0_reg_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_97_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                p_0_reg_84 <= out_assign_fu_133_p1;
            elsif (((tmp_i_fu_167_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_0_reg_84 <= out_assign_1_fu_219_p2;
            end if; 
        end if;
    end process;

    p_i_reg_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                p_i_reg_66 <= y_assign_fu_265_p3;
            elsif (((tmp_fu_97_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                p_i_reg_66 <= code;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                code_read_reg_272 <= code;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_97_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    leftoverBits(3 downto 0) <= tmp_4_cast_fu_107_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_fu_167_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                mul_reg_299 <= mul_fu_195_p2;
                tmp_11_reg_304 <= p_i_reg_66(31 downto 31);
                tmp_13_reg_310 <= mul_fu_195_p2(64 downto 36);
                    x_assign_1_reg_294(31 downto 1) <= x_assign_1_fu_185_p2(31 downto 1);
            end if;
        end if;
    end process;
    leftover(31 downto 1) <= "0000000000000000000000000000000";
    leftoverBits(31 downto 4) <= "0000000000000000000000000000";
    x_assign_1_reg_294(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, tmp_fu_97_p2, ap_CS_fsm_state2, tmp_i_fu_167_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((tmp_fu_97_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((tmp_fu_97_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_i_fu_167_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_done_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    mul_fu_195_p1 <= p_i_reg_66;
    mul_fu_195_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed('0' &ap_const_lv65_19999999A) * signed(mul_fu_195_p1))), 65));
    neg_mul_fu_230_p2 <= std_logic_vector(unsigned(ap_const_lv65_0) - unsigned(mul_reg_299));
    neg_ti_fu_259_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(tmp_s_fu_252_p3));
    out_assign_1_fu_219_p2 <= std_logic_vector(unsigned(p_0_i_reg_75) + unsigned(code_read_reg_272));
        out_assign_fu_133_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_7_fu_123_p4),32));

    previousCode_fu_161_p2 <= std_logic_vector(signed(tmp_2_fu_157_p1) + signed(tmp_1_fu_141_p2));
    tmp_12_fu_235_p4 <= neg_mul_fu_230_p2(64 downto 36);
    tmp_1_fu_141_p2 <= std_logic_vector(shift_left(unsigned(leftoverBits),to_integer(unsigned('0' & ap_const_lv32_4(31-1 downto 0)))));
        tmp_2_fu_157_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_5_fu_147_p4),32));

    tmp_3_fu_103_p1 <= code(4 - 1 downto 0);
    tmp_4_cast_fu_107_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_103_p1),32));
    tmp_4_fu_173_p2 <= std_logic_vector(shift_left(unsigned(p_0_i_reg_75),to_integer(unsigned('0' & ap_const_lv32_3(31-1 downto 0)))));
    tmp_5_fu_147_p4 <= code(31 downto 8);
    tmp_6_fu_179_p2 <= std_logic_vector(shift_left(unsigned(p_0_i_reg_75),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    tmp_7_fu_123_p4 <= code(31 downto 4);
        tmp_8_fu_245_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_12_fu_235_p4),32));

        tmp_9_fu_249_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_13_reg_310),32));

    tmp_fu_97_p2 <= "1" when (signed(leftover) > signed(ap_const_lv32_0)) else "0";
    tmp_i_fu_167_p2 <= "1" when (p_i_reg_66 = ap_const_lv32_0) else "0";
    tmp_s_fu_252_p3 <= 
        tmp_8_fu_245_p1 when (tmp_11_reg_304(0) = '1') else 
        tmp_9_fu_249_p1;
    x_assign_1_fu_185_p2 <= std_logic_vector(unsigned(tmp_6_fu_179_p2) + unsigned(tmp_4_fu_173_p2));
    y_assign_fu_265_p3 <= 
        neg_ti_fu_259_p2 when (tmp_11_reg_304(0) = '1') else 
        tmp_9_fu_249_p1;
end behav;
