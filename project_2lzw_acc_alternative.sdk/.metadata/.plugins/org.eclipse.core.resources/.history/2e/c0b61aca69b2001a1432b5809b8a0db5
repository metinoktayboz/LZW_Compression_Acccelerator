/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/


#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include <xtime_l.h>
#include <stdlib.h>
#include <string.h>
#include "xwritebinary.h"

#define WB_DEVICE_ID XPAR_WRITEBINARY_0_DEVICE_ID

//#include "lzw_acc_alt_source.c" // LZW compression
XWritebinary WBInst;

enum {
    dictionarySize = 4095, // maximum number of entries defined for the dictionary (2^12 = 4096)
    codeLength = 12, // the codes which are taking place of the substrings
    emptyPrefix = -1, // empty prefix for ASCII characters
    maxValue = dictionarySize - 1
};



struct DictNode {
    int value; // the position in the list
    int prefix; // prefix for byte > 255
    int character; // the last byte of the string
    struct DictNode *next;
};

void dictionaryInit();
void appendNode(struct DictNode *node);
void dictionaryDestroy();
int dictionaryLookup(int prefix, int character);
int dictionaryPrefix(int value);
int dictionaryCharacter(int value);
void dictionaryAdd(int prefix, int character, int value);
int writeBinary(int code, int out);

// the dictionary
struct DictNode *dictionary, *tail;

// initialize the dictionary of ASCII characters @12bits
void dictionaryInit() {
    int i;
    struct DictNode *node;
    for (i = 0; i < 256; i++) { // ASCII
        node = (struct DictNode *)malloc(sizeof(struct DictNode));
        node->prefix = emptyPrefix;
        node->character = i;
        appendNode(node);
    }
}

// add node to the list
void appendNode(struct DictNode *node) {
    if (dictionary != NULL) tail->next = node;
    else dictionary = node;
    tail = node;
    node->next = NULL;
}

// destroy the whole dictionary down to NULL
void dictionaryDestroy() {
    while (dictionary != NULL) {
        dictionary = dictionary->next; /* the head now links to the next element */
    }
}

// is prefix + character in the dictionary?
int dictionaryLookup(int prefix, int character) {
    struct DictNode *node;
    for (node = dictionary; node != NULL; node = node->next) { // ...traverse forward
        if (node->prefix == prefix && node->character == character) return node->value;
    }
    return emptyPrefix;
}

int dictionaryPrefix(int value) {
    struct DictNode *node;
    for (node = dictionary; node != NULL; node = node->next) { // ...traverse forward
        if (node->value == value) return node->prefix;
    }
    return -1;
}

int dictionaryCharacter(int value) {
    struct DictNode *node;
    for (node = dictionary; node != NULL; node = node->next) { // ...traverse forward
        if (node->value == value) {
            //printf("\nNODE %i %i %i\n", node->value, node->prefix, node->character);
            return node->character;
        }
    }
    return -1;
}

// add prefix + character to the dictionary
void dictionaryAdd(int prefix, int character, int value) {
    struct DictNode *node;
    node = (struct DictNode *)malloc(sizeof(struct DictNode));
    node->value = value;
    node->prefix = prefix;
    node->character = character;
    //printf("\n(%i) = (%i) + (%i)\n", node->value, node->prefix, node->character);
    appendNode(node);
}

int concat(int x, int y) {
    int temp = y;
    while (y != 0) {
        x *= 10;
        y /= 10;
    }
    return x + temp;
}

        int leftover = 0;
			int leftoverBits;
int writeBinary(int code, int out) {


    if (leftover > 0) {
        int previousCode = (leftoverBits << 4) + (code >> 8);
        out = concat(previousCode,code);
        leftover = 0;
        return out;
        //output[count++]=previousCode; //fputc(previousCode, output);
        //output[count++]=code;   //fputc(code, output);

         // no leftover now
    } else {
        leftoverBits = code & 0xF; // save leftover, the last 00001111
        leftover = 1;
        out = code>>4;
        return out;
        //output[count++]= code >> 4; //fputc(code >> 4, output);

    }
}

void compress(int *inputFile[10], int *outputFile[20]) {
    int prefix = inputFile[0];
    int count2 = 0;
    int leftover2 = 0;
    int leftoverBits2;
    int control = 0;
    int character;
    int i;
    int nextCode;
    int index;
    int out ;
    int status;
    unsigned int * writebinary_core = (unsigned int*) 0x43C00000;
    // LZW starts out with a dictionary of 256 characters (in the case of 8 codeLength) and uses those as the "standard"
    //  character set.
    nextCode = 256; // next code is the next available string code
    dictionaryInit();

    // while (there is still data to be read)
    for(i=1;i<10;i++) { // ch = read a character;
        character = inputFile[i];
        // if (dictionary contains prefix+character)
        if ((index = dictionaryLookup(prefix, character)) != -1) prefix = index; // prefix = prefix+character
        else { // ...no, try to add it
            // encode s to output file
            //outputFile[count2++]=writeBinary(prefix,out);
        	status = XWritebinary_Initialize(&WBInst, WB_DEVICE_ID);
        	if(status != XST_SUCCESS) return XST_FAILURE;
        	XWritebinary_Set_code(&WBInst, prefix);
        	XWritebinary_Set_out_r(&WBInst, out);
        	XWritebinary_Start(&WBInst);
        	while(XWritebinary_IsDone(&WBInst)!=1);
        	//out = XWritebinary_Get_out_r(&WBInst);
        	//outputFile[count2++] = writebinary_core[4];
        	outputFile[count2++] = XWritebinary_Get_return(&WBInst);

        	//printf("%d\n",out);
            control++;
            // add prefix+character to dictionary
            if (nextCode < dictionarySize) dictionaryAdd(prefix, character, nextCode++);

            // prefix = character
            prefix = character; //... output the last string after adding the new one
        }
    }

    // encode s to output file
    outputFile[count2++]=writeBinary(prefix,out); // output the last code
    status = XWritebinary_Initialize(&WBInst, WB_DEVICE_ID);
            	if(status != XST_SUCCESS) return XST_FAILURE;
            	XWritebinary_Set_code(&WBInst, prefix);
            	XWritebinary_Set_out_r(&WBInst, out);
            	XWritebinary_Start(&WBInst);
            	while(XWritebinary_IsDone(&WBInst)!=1);
            //	outputFile[count2++] = writebinary_core[4];
            	outputFile[count2++] = XWritebinary_Get_return(&WBInst);

            	//out = XWritebinary_Get_out_r(&WBInst);
            	//printf("%d\n",out);
    control++;

    if (control%2==0){
    	leftoverBits2 = prefix & 0xF; // save leftover, the last 00001111
    	leftover2 = 1;
        outputFile[count2++]=leftoverBits2<<4;
    } //fputc(leftoverBits << 4, outputFile);

    // free the dictionary here
    dictionaryDestroy();
}



int main() { // number of arguments, arguments array


	XTime tStart, tEnd;




    int outputFile[20];
    int inputFile[10] = {66,65,66,65,65,66,65,65,65};
    int x;
    for(x=0;x<20;x++){
        outputFile[x]=0;
    }

   // printf("%d\n", inputFile[1]);
    //start = clock();
    XTime_GetTime(&tStart);
    compress(inputFile,outputFile);
    XTime_GetTime(&tEnd);
   	 printf("Output took %llu clock cycles.\n", 2*(tEnd - tStart));
   	 printf("Output took %.2f us.\n",1.0 * (tEnd - tStart) / (COUNTS_PER_SECOND/1000000));

    //end = clock();

    int j=0;
   for(j;j<20;j++){
       // if(outputFile[j]!=0)
        printf("%d\n", outputFile[j]);
    }

    //cpu_time_used = ((double) (end - start)) / CLOCKS_PER_SEC;
    //printf("%f",cpu_time_used);

    return 0;
}

